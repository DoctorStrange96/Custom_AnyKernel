#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers
# Modified for the Moto G by kingkaminari @ xda-developers

# Main variables
OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

# Methods
ui_print() {
	until [ ! "$1" ]; do
		echo -e "ui_print $1\nui_print" > $OUTFD;
    	shift;
	done;
}

show_progress() { 
	echo "progress $1 $2" > $OUTFD; 
}

set_perm_recursive() {
	dirs=$(echo $* | awk '{ print substr($0, index($0,$5)) }');
	for i in $dirs; do
		chown -R $1.$2 $i; chown -R $1:$2 $i;
		find "$i" -type d -exec chmod $3 {} +;
		find "$i" -type f -exec chmod $4 {} +;
	done;
}

file_getprop() { 
	grep "^$2" "$1" | cut -d= -f2; 
}

getprop() { 
	test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; 
}

abort() { 
	ui_print "$*";
	exit 1; 
}

# Start...
show_progress 1.34 4;
ui_print " ";
mkdir -p /tmp/anykernel;
cd /tmp/anykernel;
unzip -o $ZIP;

ui_print "**********************************************************";
ui_print "* Moto G - Optimized Stock Kernel"
ui_print "* By KingKaminari @ XDA-Developers";
ui_print "* Device: Moto G (falcon)";
ui_print "**********************************************************";

# Mount /system
ui_print " ";
ui_print "Mounting system...";
busybox mount /system;

# Flash the kernel (zImage)
ui_print "Installing the kernel...";
/sbin/sh /tmp/anykernel/anykernel.sh;
if [ "$(cat /tmp/anykernel/exitcode)" == 1 ]; then 
	ui_print "Couldn't install the kernel. Unmounting system and aborting installation.";
	ui_print "Check /tmp/recovery.log for details.";
	umount /system;
	abort;
else
	ui_print "Kernel successfully installed.";
fi;

# Push the new modules
ui_print "Removing all old modules...";
# Only remove the modules if /system/lib/modules exists
if [ -d /system/lib/modules ]; then
	rm -rf /system/lib/modules/*;
fi;

# Copy the new modules
ui_print "Pushing new modules..."
cp -rf /tmp/anykernel/modules/* /system/lib/modules;

# Symlink pronto_wlan.ko to wlan.ko
ln -fs /system/lib/modules/pronto/pronto_wlan.ko /system/lib/modules/wlan.ko;

# Enable powerhal if disabled
if [ -e /system/lib/hw/power.msm8226.so.bak ]; then
	ui_print "PowerHAL is disabled. Enabling...\n";
	[ -e /system/lib/hw/power.msm8226.so ] || cp /system/lib/hw/power.msm8226.so.bak /system/lib/hw/power.msm8226.so;
	[ -e /system/lib/hw/power.msm8226.so.bak ] && rm -f /system/lib/hw/power.msm8226.so.bak;
else
	ui_print "PowerHAL already enabled.\n";
fi;

# Resuscitate mpdecision
if [ -e /system/bin/mpdecisionbak ]; then
	ui_print "MPDecision is disabled. Enabling...\n";
	[ -e /system/bin/mpdecision ] || cp /system/bin/mpdecisionbak /system/bin/mpdecision;
	[ -e /system/bin/mpdecisionbak ] && rm -f /system/bin/mpdecisionbak;
else
	ui_print "MPDecision already enabled.\n";
fi;

# Push modified init.qcom.post_boot.sh
if [ -e /system/etc/init.qcom.post_boot.sh ]; then 
	rm -rf /system/etc/init.qcom.post_boot.sh;
	cp -f /tmp/anykernel/patch/common/init.qcom.post_boot.sh /system/etc/;
	chmod 644 /system/etc/init.qcom.post_boot.sh;
else
	# Push the file if it doesn't exist
	cp -f /tmp/anykernel/patch/common/init.qcom.post_boot.sh /system/etc/;
	chmod 644 /system/etc/init.qcom.post_boot.sh;
fi;

# Create the init.d directory if it doesn't exist
if [ ! -d /system/etc/init.d ]; then
	mkdir /system/etc/init.d;
	chmod 755 /system/etc/init.d;
fi;

# Clean up tmp files
ui_print "Removing temporary files...";
rm -rf /tmp/anykernel;

# Unmount system and finish up
ui_print "Unmounting system...";
umount /system;

# C'est fini
ui_print " ";
ui_print "Done!";

